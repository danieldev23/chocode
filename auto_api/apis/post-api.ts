/* tslint:disable */
/* eslint-disable */
/**
 * API For My Production
 * My Production API: https://chodev.dangquochuy.id.vn/swagger/json
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { PostCommentRequest } from "../models";
import { PostCreateRequest } from "../models";
import { PostCreateResponseDto } from "../models";
import { PostDeleteRequest } from "../models";
import { PostDeleteResponse } from "../models";
import { PostUpdateRequest } from "../models";
import { PostUpdateResponse } from "../models";
/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {PostCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerComment: async (
      body: PostCommentRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postControllerComment."
        );
      }
      const localVarPath = `/api/post/comment`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerCount: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/post/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PostCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerCreate: async (
      body: PostCreateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postControllerCreate."
        );
      }
      const localVarPath = `/api/post/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} limit
     * @param {number} skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerFindAll: async (
      limit: number,
      skip: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'limit' is not null or undefined
      if (limit === null || limit === undefined) {
        throw new RequiredError(
          "limit",
          "Required parameter limit was null or undefined when calling postControllerFindAll."
        );
      }
      // verify required parameter 'skip' is not null or undefined
      if (skip === null || skip === undefined) {
        throw new RequiredError(
          "skip",
          "Required parameter skip was null or undefined when calling postControllerFindAll."
        );
      }
      const localVarPath = `/api/post/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (skip !== undefined) {
        localVarQueryParameter["skip"] = skip;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerFindWithCategory: async (
      category: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError(
          "category",
          "Required parameter category was null or undefined when calling postControllerFindWithCategory."
        );
      }
      const localVarPath = `/api/post/{category}`.replace(
        `{${"category"}}`,
        encodeURIComponent(String(category))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerGetPostDetail: async (
      slug: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      if (slug === null || slug === undefined) {
        throw new RequiredError(
          "slug",
          "Required parameter slug was null or undefined when calling postControllerGetPostDetail."
        );
      }
      const localVarPath = `/api/post/{slug}`.replace(
        `{${"slug"}}`,
        encodeURIComponent(String(slug))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PostDeleteRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerRemove: async (
      body: PostDeleteRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postControllerRemove."
        );
      }
      const localVarPath = `/api/post/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PostUpdateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postControllerUpdate: async (
      body: PostUpdateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postControllerUpdate."
        );
      }
      const localVarPath = `/api/post/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {PostCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerComment(
      body: PostCommentRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerComment(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerCount(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerCount(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {PostCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerCreate(
      body: PostCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PostCreateResponseDto>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} limit
     * @param {number} skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerFindAll(
      limit: number,
      skip: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<PostCreateResponseDto>>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerFindAll(limit, skip, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerFindWithCategory(
      category: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<PostCreateResponseDto>>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerFindWithCategory(category, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerGetPostDetail(
      slug: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PostCreateResponseDto>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerGetPostDetail(slug, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {PostDeleteRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerRemove(
      body: PostDeleteRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PostDeleteResponse>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerRemove(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {PostUpdateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerUpdate(
      body: PostUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PostUpdateResponse>>
    > {
      const localVarAxiosArgs = await PostApiAxiosParamCreator(
        configuration
      ).postControllerUpdate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {PostCommentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerComment(
      body: PostCommentRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return PostApiFp(configuration)
        .postControllerComment(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerCount(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return PostApiFp(configuration)
        .postControllerCount(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PostCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerCreate(
      body: PostCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PostCreateResponseDto>> {
      return PostApiFp(configuration)
        .postControllerCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} limit
     * @param {number} skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerFindAll(
      limit: number,
      skip: number,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<PostCreateResponseDto>>> {
      return PostApiFp(configuration)
        .postControllerFindAll(limit, skip, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerFindWithCategory(
      category: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<PostCreateResponseDto>>> {
      return PostApiFp(configuration)
        .postControllerFindWithCategory(category, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerGetPostDetail(
      slug: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PostCreateResponseDto>> {
      return PostApiFp(configuration)
        .postControllerGetPostDetail(slug, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PostDeleteRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerRemove(
      body: PostDeleteRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PostDeleteResponse>> {
      return PostApiFp(configuration)
        .postControllerRemove(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PostUpdateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postControllerUpdate(
      body: PostUpdateRequest,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PostUpdateResponse>> {
      return PostApiFp(configuration)
        .postControllerUpdate(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
  /**
   *
   * @param {PostCommentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerComment(
    body: PostCommentRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return PostApiFp(this.configuration)
      .postControllerComment(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerCount(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return PostApiFp(this.configuration)
      .postControllerCount(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {PostCreateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerCreate(
    body: PostCreateRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PostCreateResponseDto>> {
    return PostApiFp(this.configuration)
      .postControllerCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {number} limit
   * @param {number} skip
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerFindAll(
    limit: number,
    skip: number,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<PostCreateResponseDto>>> {
    return PostApiFp(this.configuration)
      .postControllerFindAll(limit, skip, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerFindWithCategory(
    category: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<PostCreateResponseDto>>> {
    return PostApiFp(this.configuration)
      .postControllerFindWithCategory(category, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {string} slug
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerGetPostDetail(
    slug: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PostCreateResponseDto>> {
    return PostApiFp(this.configuration)
      .postControllerGetPostDetail(slug, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {PostDeleteRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerRemove(
    body: PostDeleteRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PostDeleteResponse>> {
    return PostApiFp(this.configuration)
      .postControllerRemove(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @param {PostUpdateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public async postControllerUpdate(
    body: PostUpdateRequest,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PostUpdateResponse>> {
    return PostApiFp(this.configuration)
      .postControllerUpdate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
