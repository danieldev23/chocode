generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum FeelingType {
  LIKE
  SAD
  ANGRY
  TYM
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar(50)
  fullName   String    @map("full_name") @db.VarChar(255)
  active     Boolean   @default(true)
  block      Boolean   @default(false)
  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  avatar     String?   @db.Text
  bio        String?   @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  role       Role?     @relation(fields: [roleId], references: [id])
  roleId     Int       @map("role_id")
  posts      Post[]
  comments   Comment[]
  feelings   Feeling[]

  @@map("users")
}

model Role {
  id       Int    @id @default(autoincrement())
  roleName String @map("role_name")
  users    User[]

  @@map("roles")
}

model Post {
  id          Int           @id @default(autoincrement())
  slug        String
  title       String
  content     String
  user        User?         @relation(fields: [userId], references: [id])
  userId      Int?          @map("user_id")
  comments    Comment[]
  feelings    Feeling[]
  TagsOnPosts TagsOnPosts[]

  @@map("posts")
}

model Comment {
  id        Int       @id @default(autoincrement())
  comment   String
  creatAt   DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?      @map("user_id")
  post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?      @map("post_id")
  feelings  Feeling[]

  @@map("comments")
}

model Feeling {
  id        Int         @id @default(autoincrement())
  type      FeelingType
  createdAt DateTime    @default(now()) @map("created_at")
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int         @map("user_id")
  post      Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?        @map("post_id")
  comment   Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?        @map("comment_id")

  @@map("feelings")
}

model Tag {
  id    Int           @id @default(autoincrement())
  name  String
  posts TagsOnPosts[]

  @@map("tags")
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int      @map("post_id")
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int      @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String   @map("assigned_by")

  @@id([postId, tagId])
  @@map("tags_on_posts")
}

model Category {
  id Int @id @default(autoincrement())
  title String 
  slug String
  icon String
  @@map("categories")
}